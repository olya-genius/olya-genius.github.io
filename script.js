let model = null;
let scalerParams = null;

document.addEventListener('DOMContentLoaded', async function () {
    await loadScalerParams();
    await loadModel();
    setupEventListeners();
});

async function loadScalerParams() {
    try {
        const response = await fetch('scaler_params.json');
        scalerParams = await response.json();
        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    }
}

async function loadModel() {
    const statusElement = document.getElementById('model-status');
    try {
        statusElement.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...';
        statusElement.className = 'model-status status-loading';

        model = await tf.loadLayersModel('tfjs_model/model.json');

        statusElement.textContent = '–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞';
        statusElement.className = 'model-status status-ready';
        document.getElementById('predict-btn').disabled = false;

        console.log('–ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
        updateModelInfo();

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', error);
        statusElement.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ';
        statusElement.className = 'model-status status-error';
    }
}

function updateModelInfo() {
    const modelInfo = document.getElementById('model-info');
    if (model) {
        modelInfo.innerHTML = `
            <p><strong>–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:</strong> –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ –∑ 4 –≤—Ö–æ–¥–∞–º–∏ —Ç–∞ 5 –≤–∏—Ö–æ–¥–∞–º–∏</p>
            <p><strong>–í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong> —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è, –æ–ø–∞–¥–∏, —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É, —Å–µ–∑–æ–Ω</p>
            <p><strong>–í–∏—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong> –∫–∏—Å–µ–Ω—å, pH, –∫–∞–ª–∞–º—É—Ç–Ω—ñ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥–∏, –∑–∞–±—Ä—É–¥–Ω—é–≤–∞—á—ñ</p>
        `;
    }
}

function setupEventListeners() {
    document.getElementById('predict-btn').addEventListener('click', runPrediction);
    document.getElementById('simulate-btn').addEventListener('click', simulateSensorUpdate);
}

function simulateSensorUpdate() {
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    const airTemp = (Math.random() * 30 + 5).toFixed(1);
    const precipitation = (Math.random() * 50).toFixed(1);
    const windSpeed = (Math.random() * 15 + 1).toFixed(1);
    const season = Math.floor(Math.random() * 4);
    const seasonNames = ['–ó–∏–º–∞', '–í–µ—Å–Ω–∞', '–õ—ñ—Ç–æ', '–û—Å—ñ–Ω—å'];

    document.getElementById('current-air-temp').textContent = airTemp;
    document.getElementById('current-precipitation').textContent = precipitation;
    document.getElementById('current-wind-speed').textContent = windSpeed;
    document.getElementById('current-season').textContent = `${seasonNames[season]} (${season})`;
}

function normalizeInput(data) {
    if (!scalerParams) return data;
    return data.map((value, index) => {
        return (value - scalerParams.X_mean[index]) / scalerParams.X_scale[index];
    });
}

function denormalizeOutput(data) {
    if (!scalerParams) return data;
    return data.map((value, index) => {
        return value * scalerParams.y_scale[index] + scalerParams.y_mean[index];
    });
}

async function runPrediction() {
    if (!model || !scalerParams) {
        alert('–ú–æ–¥–µ–ª—å –∞–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!');
        return;
    }

    try {
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        const airTemp = parseFloat(document.getElementById('current-air-temp').textContent);
        const precipitation = parseFloat(document.getElementById('current-precipitation').textContent);
        const windSpeed = parseFloat(document.getElementById('current-wind-speed').textContent);
        const seasonText = document.getElementById('current-season').textContent;
        const season = parseInt(seasonText.match(/\((\d)\)/)[1]);

        const inputData = [airTemp, precipitation, windSpeed, season];
        const normalizedInput = normalizeInput(inputData);

        const inputTensor = tf.tensor2d([normalizedInput]);
        const predictionTensor = model.predict(inputTensor);
        const predictionData = await predictionTensor.dataSync();
        const denormalizedPrediction = denormalizeOutput(Array.from(predictionData));

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        updatePredictionDisplay(denormalizedPrediction);
        updatePredictionExplanation(inputData, denormalizedPrediction);

        inputTensor.dispose();
        predictionTensor.dispose();

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:', error);
        alert('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è');
    }
}

function updatePredictionDisplay(prediction) {
    const [oxygen, ph, turbidity, waterTemp, pollutants] = prediction;
    const currentValues = getCurrentValues();

    updateParameterElement('predict-oxygen', oxygen, currentValues.oxygen);
    updateParameterElement('predict-ph', ph, currentValues.ph);
    updateParameterElement('predict-turbidity', turbidity, currentValues.turbidity);
    updateParameterElement('predict-temperature', waterTemp, currentValues.waterTemp);
    updateParameterElement('predict-pollutants', pollutants, currentValues.pollutants);
}

function getCurrentValues() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è –∑ –¥–∞—Ç—á–∏–∫—ñ–≤
    return {
        oxygen: 8.0,
        ph: 7.0,
        turbidity: 15.0,
        waterTemp: 20.0,
        pollutants: 5.0
    };
}

function updateParameterElement(elementId, value, currentValue) {
    const element = document.getElementById(elementId);
    const valueElement = element.querySelector('span:last-child');

    valueElement.textContent = value.toFixed(2);

    element.classList.remove('increase', 'decrease');
    if (value > currentValue * 1.05) {
        element.classList.add('increase');
    } else if (value < currentValue * 0.95) {
        element.classList.add('decrease');
    }
}

function updatePredictionExplanation(inputData, prediction) {
    const [airTemp, precipitation, windSpeed, season] = inputData;
    const [oxygen, ph, turbidity, waterTemp, pollutants] = prediction;

    let explanation = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É:</h4>';

    explanation += `<p>–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${airTemp}¬∞C, –æ–ø–∞–¥–∏: ${precipitation}–º–º, –≤—ñ—Ç–µ—Ä: ${windSpeed}–º/—Å) –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑—É—î:</p>`;

    if (oxygen < 6.0) {
        explanation += `<p>‚ö†Ô∏è <strong>–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∫–∏—Å–Ω—é:</strong> ${oxygen.toFixed(2)} –º–≥/–ª. –ú–æ–∂–ª–∏–≤–∞ –∑–∞–≥—Ä–æ–∑–∞ –¥–ª—è –≤–æ–¥–Ω–∏—Ö –æ—Ä–≥–∞–Ω—ñ–∑–º—ñ–≤.</p>`;
    } else {
        explanation += `<p>‚úÖ <strong>–†—ñ–≤–µ–Ω—å –∫–∏—Å–Ω—é:</strong> ${oxygen.toFixed(2)} –º–≥/–ª (–≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏).</p>`;
    }

    if (ph < 6.5 || ph > 8.5) {
        explanation += `<p>‚ö†Ô∏è <strong>–ö–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –Ω–æ—Ä–º–∏:</strong> pH = ${ph.toFixed(2)}. –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω: 6.5-8.5.</p>`;
    } else {
        explanation += `<p>‚úÖ <strong>–ö–∏—Å–ª–æ—Ç–Ω—ñ—Å—Ç—å:</strong> pH = ${ph.toFixed(2)} (–≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏).</p>`;
    }

    explanation += `<p>üìä <strong>–Ü–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong> –ö–∞–ª–∞–º—É—Ç–Ω—ñ—Å—Ç—å: ${turbidity.toFixed(2)} NTU, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥–∏: ${waterTemp.toFixed(2)}¬∞C, –ó–∞–±—Ä—É–¥–Ω—é–≤–∞—á—ñ: ${pollutants.toFixed(2)} ppm</p>`;

    document.getElementById('prediction-explanation').innerHTML = explanation;
}